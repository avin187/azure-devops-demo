name: CI-CD
on:
  push: { branches: [ "main" ] }
  pull_request: { branches: [ "main" ] }
permissions:
  id-token: write
  contents: read
env:
  APP_NAMESPACE: ${{ vars.APP_NAMESPACE || 'demo' }}
  AKS_RG: ${{ vars.AKS_RG }}
  AKS_NAME: ${{ vars.AKS_NAME }}
  ACR_NAME: ${{ vars.ACR_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt pytest

      - name: Run unit tests
        run: pytest -q

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get ACR login server
        id: acr
        run: |
          echo "ACR_LOGIN_SERVER=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Docker build & push
        run: |
          az acr login --name "$ACR_NAME"
          IMAGE="${{ steps.acr.outputs.ACR_LOGIN_SERVER }}/devops-demo-app:${{ github.sha }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_NAME }}

      - uses: azure/setup-helm@v4

      - name: Ensure namespace
        run: |
          kubectl create namespace "${APP_NAMESPACE}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy/Upgrade app via Helm
        run: |
          helm upgrade --install demo k8s/helm/app-chart -n "${APP_NAMESPACE}" \
            --set image.repository="${{ steps.acr.outputs.ACR_LOGIN_SERVER }}/devops-demo-app" \
            --set image.tag="${{ github.sha }}" \
            --set monitoring.annotationsScrape=true

      - name: Install/Upgrade monitoring
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            -n monitoring -f monitoring/values-kube-prom-stack.yaml

      - name: Show services
        run: |
          kubectl get svc -n "${APP_NAMESPACE}"
          kubectl get svc -n monitoring
